version: '3.8'

services:
  app1:
    build: ./app1
    container_name: app1
    environment:
      MYSQL_HOST: mysql
      MYSQL_USER: appuser
      MYSQL_PASSWORD: appuserpass
      MYSQL_DATABASE: testdb
      APP_NAME: app1
    ports:
      - "8080:5000"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - app-network

  app2:
    build: ./app1
    container_name: app2
    environment:
      MYSQL_HOST: mysql
      MYSQL_USER: appuser
      MYSQL_PASSWORD: appuserpass
      MYSQL_DATABASE: testdb
      APP_NAME: app2
    ports:
      - "8081:5000"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - app-network

  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app1
      - app2
    networks:
      - app-network

  mysql:
    image: mysql:8
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: rootpass123
      MYSQL_DATABASE: testdb
      MYSQL_USER: appuser
      MYSQL_PASSWORD: appuserpass
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 5s
      timeout: 10s
      retries: 12
    networks:
      - app-network

  mysqld-exporter:
    image: prom/mysqld-exporter:v0.14.0
    container_name: mysqld_exporter
    environment:
      DATA_SOURCE_NAME: "appuser:appuserpass@(mysql:3306)/testdb"
    command: 
      - --no-collect.slave_status
    ports:
      - "9104:9104"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - app-network

  nginx-exporter:  # Corregido: nombre con guión e indentación
    image: nginx/nginx-prometheus-exporter:0.11.0
    container_name: nginx_exporter
    command:
      - '--nginx.scrape-uri=http://nginx/nginx_status'
    ports:
      - "9113:9113"
    depends_on:
      - nginx
    networks:
      - app-network

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node_exporter
    ports:
      - "9100:9100"
    pid: "host"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
    networks:
      - app-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/rules.yml:/etc/prometheus/rules.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.enable-lifecycle'
    depends_on:
      - node-exporter
      - mysqld-exporter
      - nginx-exporter
    networks:
      - app-network

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - app-network

volumes:
  mysql_data:
  grafana_data:

networks:
  app-network:
    driver: bridge